/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.11 ./icecream.glb -t -f 
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Spiral003: THREE.Mesh;
    Cylinder025: THREE.Mesh;
    Cylinder025_1: THREE.Mesh;
  };
  materials: {
    ['creamm.002']: THREE.MeshPhysicalMaterial;
    ['poster.002']: THREE.MeshStandardMaterial;
    ['Material.002']: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>
>;

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/icecream.glb') as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Spiral003.geometry}
        material={materials['creamm.002']}
      />
      <group
        position={[0.005, 0.053, 0.001]}
        rotation={[Math.PI, -1.415, Math.PI]}
        scale={[0.69, 0.692, 0.69]}
      >
        <mesh
          geometry={nodes.Cylinder025.geometry}
          material={materials['poster.002']}
        />
        <mesh
          geometry={nodes.Cylinder025_1.geometry}
          material={materials['Material.002']}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/icecream.glb');
